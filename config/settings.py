"""
Django settings for config project.

Generated by 'django-admin startproject' using Django 5.0.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""
import ast
import os
from datetime import timedelta
from pathlib import Path

# from celery.schedules import crontab
from dotenv import load_dotenv

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
ENV_TYPE = os.getenv('ENV_TYPE')


load_dotenv(BASE_DIR / '.env')
# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

if ENV_TYPE == 'local':
    ALLOWED_HOSTS = []
elif ENV_TYPE == 'server':
    ALLOWED_HOSTS = [os.getenv('HOST_IP')]
else:
    ALLOWED_HOSTS = []

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # add_app
    'rest_framework',
    'drf_yasg',
    'corsheaders',
    'rest_framework_simplejwt',
    'django_filters',
    'django_celery_beat',
    # app_name
    'users',
    'habit',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'config.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'config.wsgi.application'

# Database
# https://docs.djangoproject.com/en/5.0/ref/settings/#databases

# DATABASES = {
#     'default': ast.literal_eval(os.getenv('DATABASE_LOGIN'))
# }
if ENV_TYPE == 'local':
    DATABASES = {
        'default': {
            "ENGINE": os.getenv("ENGINE_DB"),
            "NAME": os.getenv("NAME_BD"),
            "USER": os.getenv("USER_BD"),
        }
    }
elif ENV_TYPE == 'server':
    DATABASES = {
        'default': {
            "ENGINE": os.getenv("ENGINE_DB"),
            "NAME": os.getenv("NAME_BD_DOCKER"),
            "USER": os.getenv("USER_BD"),
            'PASSWORD': os.getenv("PASSWORD_BD"),
            'HOST': os.getenv("HOST_BD")
        }
    }
else:
    DATABASES = {
        'default': {
            "ENGINE": os.getenv("ENGINE_DB"),
            "NAME": os.getenv("NAME_BD"),
            "USER": os.getenv("USER_BD"),
        }
    }
# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

STATIC_URL = 'static/'

if ENV_TYPE == 'local':
    STATICFILES_DIRS = (
        BASE_DIR / 'static',
    )
elif ENV_TYPE == 'server':
    STATIC_ROOT = BASE_DIR / 'static'
else:
    STATICFILES_DIRS = (
        BASE_DIR / 'static',
    )

# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Для авторизации обязательный параметр
AUTH_USER_MODEL = 'users.User'

SUPERUSER_EMAIL = os.getenv('SUPERUSER_EMAIL')
SUPERUSER_PASSWORD = os.getenv('SUPERUSER_PASSWORD')

USER_PASSWORD = os.getenv("USER_PASSWORD")

NULLABLE = {'blank': True, 'null': True}

REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
        'rest_framework.authentication.BasicAuthentication',
        'rest_framework.authentication.SessionAuthentication',
    ),
    'DEFAULT_FILTER_BACKENDS': (
        'django_filters.rest_framework.DjangoFilterBackend',
    ),
    'DEFAULT_PAGINATION_CLASS': 'habit.paginator.HabitPaginator',
}

# Настройки срока действия токенов
SIMPLE_JWT = {
    'ACCESS_TOKEN_LIFETIME': timedelta(minutes=60),
    'REFRESH_TOKEN_LIFETIME': timedelta(days=1),
}

TELEGRAM_TOKEN = os.getenv('TELEGRAM_TOKEN')

# URL-адрес брокера сообщений
if ENV_TYPE == 'local':
    CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL_LOCAL')
    CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND_LOCAL')
elif ENV_TYPE == 'server':
    CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL_DOCKER')
    CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND_DOCKER')
else:
    CELERY_BROKER_URL = os.getenv('CELERY_BROKER_URL_LOCAL')
    CELERY_RESULT_BACKEND = os.getenv('CELERY_RESULT_BACKEND_LOCAL')


CHAT_ID_TG_TEST = os.getenv("CHAT_ID_TG_TEST")

# Для сохранения задач, если прекращен процесс
CELERY_BEAT_SCHEDULER = "django_celery_beat.schedulers:DatabaseScheduler"

# Часовой пояс для работы Celery
CELERY_TIMEZONE = "Australia/Tasmania"

# Флаг отслеживания выполнения задач
CELERY_TASK_TRACK_STARTED = True

# Максимальное время на выполнение задачи
CELERY_TASK_TIME_LIMIT = 30 * 60

CORS_ALLOWED_ORIGINS = [
    "https://read-only.example.com",
    "https://read-and-write.example.com",
]

CSRF_TRUSTED_ORIGINS = [
    "https://read-and-write.example.com",
]

SWAGGER_SETTINGS = {
    'SECURITY_DEFINITIONS': {
        'Bearer_token': {
            'type': 'apiKey',
            'in': 'header',
            'name': 'Authorization'
        }
    },
    # 'LOGIN_URL': getattr(settings, 'LOGIN_URL', None),
    # 'LOGOUT_URL': getattr(settings, 'LOGOUT_URL', None),
    'DOC_EXPANSION': None,
    'APIS_SORTER': None,
    'OPERATIONS_SORTER': None,
    'JSON_EDITOR': False,
    'SHOW_REQUEST_HEADERS': False,
    'SUPPORTED_SUBMIT_METHODS': [
        'get',
        'post',
        'put',
        'delete',
        'patch'
    ],
    'VALIDATOR_URL': '',
}
